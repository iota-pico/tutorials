Object.defineProperty(exports, "__esModule", { value: true });
// Import the classes we need
const data_1 = require("@iota-pico/data");
const pow_nodejs_1 = require("@iota-pico/pow-nodejs");
(async function () {
    try {
        console.log("Performing proof of work");
        const trinaryString
        const minWeightMagnitude = 5;
        console.log("Min Weight Magnitude:", minWeightMagnitude);
        console.log("Input Data:", trinaryString);
        const obj = new pow_nodejs_1.ProofOfWorkNodeJs();
        // Initialize the proof of work, this might throw and exception if it is using a 
        // method that is not supported
        await obj.initialize();
        // Record the start time
        const start = Date.now();
        // Perform the proof of work
        const newTrytes = await obj.singlePow(data_1.Trytes.fromString(trinaryString), minWeightMagnitude);
        // Record the end time
        const end = Date.now();
        const newTrytesString = newTrytes.toString();
        // And log the response
        console.log("Output Data:", newTrytesString);
        // Just the nonce
        console.log("Nonce only:", newTrytesString.substr(-81));
        // Time taken
        console.log("Time taken:", end - start, "ms");
    }
    catch (err) {
        // Or log an error if it failed
        console.error(err);
    }
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvb2ZPZldvcmsuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwcm9vZk9mV29yay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNkJBQTZCO0FBQzdCLDBDQUF5QztBQUN6QyxzREFBeUU7QUFFekUsQ0FBQyxLQUFLO0lBQ0YsSUFBSTtRQUNBLE9BQU8sQ0FBQyxHQUFHLENBQUMsMEJBQTBCLENBQUMsQ0FBQztRQUV4QyxNQUFNLGFBQWEsR0FBRyxtbkZBQW1uRixDQUFDO1FBQzFvRixNQUFNLGtCQUFrQixHQUFHLENBQUMsQ0FBQztRQUU3QixPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixFQUFFLGtCQUFrQixDQUFDLENBQUM7UUFDekQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFFMUMsTUFBTSxHQUFHLEdBQUcsSUFBSSw4QkFBVyxFQUFFLENBQUM7UUFFOUIsaUZBQWlGO1FBQ2pGLCtCQUErQjtRQUMvQixNQUFNLEdBQUcsQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUV2Qix3QkFBd0I7UUFDeEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3pCLDRCQUE0QjtRQUM1QixNQUFNLFNBQVMsR0FBRyxNQUFNLEdBQUcsQ0FBQyxTQUFTLENBQUMsYUFBTSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBQzVGLHNCQUFzQjtRQUN0QixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFdkIsTUFBTSxlQUFlLEdBQUcsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRTdDLHVCQUF1QjtRQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxlQUFlLENBQUMsQ0FBQztRQUU3QyxpQkFBaUI7UUFDakIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFeEQsYUFBYTtRQUNiLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLEdBQUcsR0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDL0M7SUFBQyxPQUFNLEdBQUcsRUFBRTtRQUNULCtCQUErQjtRQUMvQixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3RCO0FBQ0wsQ0FBQyxDQUFDLEVBQUUsQ0FBQyJ9